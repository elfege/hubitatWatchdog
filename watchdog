import java.text.SimpleDateFormat
import groovy.transform.Field
import groovy.json.JsonOutput

@Field static remoteResponded = true



definition(
    name: "Hubitat CSP Watchdog",
    namespace: "elfege",
    author: "ELFEGE",

    description: "Check that cron service is running properly and, if not, then reboot the hub",

    category: "maintenance",
    iconUrl: "https://www.philonyc.com/assets/penrose.jpg",
    iconX2Url: "https://www.philonyc.com/assets/penrose.jpg", 
    image: "https://www.philonyc.com/assets/penrose.jpg"
)

preferences {
    page name: "pageConfig"
    page name: "connectPage"
}
mappings{
    // Server Mappings
    path("/ping")
    {
        action: [GET: "parsePing"]
    }
    path("/confirmReception")
    {
        action: [GET: "confirmationReceived"]
    }
    path("/rebooting")
    {
        action: [GET: "registerReboot"]
    }

}
def pageConfig() {


    appLabel()


    def pageProperties = [
        name:       "pageConfig",
        title:      "$app.label",
        nextPage:   null,
        install: true,
        uninstall: true,
        submitOnChange:true
    ]

    dynamicPage(pageProperties) {


        if(state.paused == true)
        {
            state.button_name = "resume"
            logging("button name is: $state.button_name")
        }
        else 
        {
            state.button_name = "pause"
            logging("button name is: $state.button_name")
        }


        section("")
        {
            input "pause", "button", title: "$state.button_name"
        }
        section("restricted modes")
        {
            input "restricted", "mode", title: "Do not run this app when in these modes:", description:"select modes", multiple:true, required:false
        }

        section(menuHeader("Method 1: Motion Sensors Trigger - this is the basic method"))
        { 
            input "motionSensors", "capability.motionSensor", title: "Choose your motion sensors", despcription: "pick a motion sensor", required:true,
                multiple:true, submitOnChange: true
            input "ip", "text", title: "IP ADDRESS OF YOUR HUB", despcription: "enter your ip address without 'http://'", required:true
        }
        section(menuHeader("Method 2: Virtual Switch trigger - this method provides better reactivity"))
        {
            input "swt", "capability.switch", title: "(optional) Select a control virtual switch",description:"Select a VIRTUAL switch", required:false, submitOnChange:true
            if(swt)
            {
                paragraph "This app will monitor the reaction time between the cmd and the event declaration to check your hub's reactivity."
            }
        }
        section(menuHeader("Method 3: Local Remote Hub Trigger - this method is great for those whom use a second hub"))
        {
            input "workWithRemoteHub", "bool", title: "watch a remote hub on your network", defaultValue: false, submitOnChange: true
            if(workWithRemoteHub)
            {
                href "connectPage", title: "Configure IP and Token Key", description: "", state: state.clientURI ? "complete" : null
            }
        }

        section("logging")
        {
            input "enablelogging", "bool", title:"Enable logging", defaultValue:false, submitOnChange:true
            input "enabledescriptiontext", "bool", title:"Enable description text", defaultValue:true, submitOnChange:true
        }
        section()
        {
            input "userLabel", "text", title: "Rename this app", submitOnChange: true, required: false
            if(state.installed)
            {
                input "update", "button", title: "UPDATE"
                if(swt) {input "test", "button", title: "toggle $swt"}
                input "run", "button", title: "RUN"
                if(workWithRemoteHub) {input "pingtest", "button", title: "PING TEST"}
            }
        }
    }
}
def connectPage(){
    if (!state?.accessToken)
    {
        createAccessToken()
    }

    state.remoteType = "local"
    state.localConnectionType = http

    dynamicPage(name: "connectPage", uninstall: false, install: false)
    {
        section()
        {
            paragraph "<h2> Make sure to enable the same settings on your other hub, using the same app </h2>"
        }

        section("Client Details")
        {
            input "clientName", "string", title: "Friendly Name of Remote Client:", required: false, defaultValue: null, submitOnChange: true
            if (clientName) input "clientIP", "string", title: "Private LAN IP Address of Remote Client:", required: false, defaultValue: null, submitOnChange: true
        }
        if (clientIP)
        {
            section("Connection Key")
            {


                paragraph("Copy and Paste this Connection Key into the Remote hub's configuration:<textarea rows=\"3\" style=\"width:80%; font-family:Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New, monospace;\" onclick=\"this.select()\" onclick=\"this.focus()\">${getConnectString()}</textarea>")


            }

            section("connection key")
            {   
                input "serverKey", "string", title: "Paste here the connection key you've gotten from the other hub's instance of this app:", required: true
            }
        }
    }
}
def appButtonHandler(btn) {
    switch(btn) {
        case "pause":state.paused = !state.paused
        log.debug "state.paused = $state.paused"
        if(state.paused)
        {
            log.debug "unscheduling all tasks..."
            unschedule()
            log.debug "unsuscribing from events..."
            unsubscribe()         
            break
        }
        else
        {
            updated()            
            break
        }
        case "update":
        state.paused = false
        updated()
        break
        case "test":
        state.swtCmd = now()
        swt.currentValue("switch") == "on" ? swt.off() : swt.on()
        break
        case "YES":
        runIn(3, reboot)
        state.confirm = false
        break
        case "CANCEL":
        state.confirm = false
        break
        case "pingtest":
        remoteServerHealth()
        break
        case "run":
        master("testrun")
        break

    }
}
def installed() {
    logging("Installed with settings: ${settings}")
    state.fix = 0
    state.lastReboot = now()
    state.installed = true
    initialize()
}
def updated() {
    log.info "updated with settings: ${settings}"

    unsubscribe()
    unschedule()
    initialize()
}
def initialize() {
    state.paused = false
    state.pausedRemoteReboot = false
    state.remoteRebootTime = now()
    state.lastLabelTime = now()
    state.swtEvt = 0

    if(enablelogging == true){
        state.EnableDebugTime = now()
        runIn(1800, disablelogging)
        log.info "disablelogging scheduled to run in ${1800/60} minutes"
    }
    else 
    {
        log.warn "debug logging disabled!"
    }

    int i = 0
    int s = 0

    i = 0
    s = motionSensors.size()
    for(s!=0;i<s;i++)
    {
        subscribe(motionSensors[i], "motion", mainHandler)
        log.trace "${motionSensors[i]} subscribed to events"
    }

    if(swt)
    {
        subscribe(swt, "switch", switchHandler)
        state.lastSwtEvent = now() 
        state.swtCmd = now()
    }

    configureRemote()

    subscribe(location, "systemStart", hubEventHandler) // manage bugs and hub crashes

    //state.remoteResponded = true // using static instead
    state.pingInterval = 60000 // default
    state.lastCheckIn = now()
    state.attempts = 0
    state.cronPositive = 0
    state.swtAttempt = 0

    state.timer = 1
    schedule("0 0/${state.timer} * * * ?", cronMaster) 
    state.lastRun = now()  // time stamp to see if cron service is working properly

    logging("initialization done")
}
def locationModeChangeHandler(evt){
    logging("$evt.name is now in $evt.value mode")   
}
def switchHandler(evt){
    log.info "$evt.device is $evt.value"


    state.swtEvt = 0 // reset this value to 0 so the app knows that hub is responsive to events (boolean is an insufficient method here after a fresh reboot)

    def timeTolerance = 2*1000
    def elapsed = (now() - state.swtCmd) / 1000 // elapsed time converted into seconds
    def falseAlarmThreshold = 5 // max number of times the elapsed time can be beyond timeTolerance
    def absoluteLimit = 20 // (in seconds) too much of a delay is not acceptable so if this limit is passed...
    //... then bring false alarm threshold down 
    if(elapsed >= absoluteLimit) {
        // if it happens a second time that it took far too long, then reboot the hub
        falseAlarmThreshold = 1
        log.warn "HUB IS GETTING SLOW bringing falseAlarmThreshold down to $falseAlarmThreshold" 
    } 
    else
    {
        descriptiontext "elapsed time is below critical"
    }
    state.lastSwtEvent = now() // remember when last event was registered

    logging """
timeTolerance = ${timeTolerance/1000} seconds
elapsed time between cmd and evt = $elapsed seconds
absoluteLimit = $absoluteLimit
falseAlarmThreshold = falseAlarmThreshold attempts
"""
    if(state.swtAttempt >= falseAlarmThreshold) 
    {
        log.warn """
THIS HUB IS TOO SLOW! REBOOTING...
state.swtAttempt = $state.swtAttempt
elapsed = $elapsed (absoluteLimit is $absoluteLimit)
"""
        state.swtAttempt = 0
        reboot()
        return
    }
    if(elapsed > timeTolerance && elapsed < absoluteLimit)
    {
        log.warn "HUB TOOK ${(now() - state.swtCmd)/1000} seconds TO RESPOND TO CMD attempt #${state.swtAttempt}"
        state.swtAttempt += 1
        // run a new test
        state.swtCmd = now()
        (evt.value == "off") ? swt.on() : swt.off()
    }
    else 
    {
        descriptiontext("Local Hub Response time to a Switch Command is within acceptable parameter (${elapsed} seconds)")
        state.swtAttempt = 0
    }
}
def mainHandler(evt){    
    //log.info "${evt.name}: $evt.device is $evt.value --------------------"

    if(location.mode in restrictedModes)
    {
        logging("location in restricted mode, doing nothing")
        return
    }
    else 
    {
        master("mainHandler")
    }
}
def hubEventHandler(evt){

    unschedule()
    unsubscribe() // temporarily stop all instances to prevent loop reboots

    log.warn "Hub has just restarted! ${app.label} will resume in 2 minutes..."
    state.lastReboot = now()
    runIn(120, updated) // restart this app 2 minutes after complete reboot
    state.pausedRemoteReboot = false
}
def cronMaster(){
    state.lastRun = now() // time stamp to see if cron service is working properly
    state.lastRunStamp = new Date().format("h:mm:ss a", location.timeZone) // formated time stamp for debug purpose
    master("cronMaster")
}
def master(String data){

    if(state.paused)
    {
        if(state.pausedRemoteReboot)
        {
            log.info "app paused due to remote reboot procedure. It will resume in a couple minutes, be patient"
        }
        else
        {
            log.info "app paused"
            runIn(1800, updated)
        }
    }
    else 
    {

        if(data == "cronMaster" && state.cronPositive != 0)
        {
            log.warn("FALSE POSITIVE, reboot canceled!")
            state.cronPositive = 0
        }

        if(workWithRemoteHub)
        {
            logging "state.pingInterval = $state.pingInterval"
            if(now() - state.lastCheckIn > state.pingInterval)
            {
                state.lastCheckIn = now()
                remoteServerHealth()
                runIn(2, checkResult)

                /*if(now() - state.lastLabelTime > 120000 || remoteResponded == false) 
{
appLabel()
}*/
            }
        }

        if(swt && now() - state.swtCmd > 30000)
        {
            if(state.swtEvt > 2 && now() - state.lastSwtEvent > 60000)
            {
                log.warn "Hub is no longer responding to events! REBOOTING"
                reboot()
            }
            descriptiontext("Testing Hub's Responsiveness by triggering $swt")
            state.swtCmd = now()
            (swt.currentValue("switch") == "off") ? swt.on() : swt.off()
            state.swtEvt += 1
        }




        logging("***${new Date().format("h:mm:ss a", location.timeZone)}**** Origin: $data")

        if(location.mode in restrictedModes)
        {
            log.info("location in restricted mode, doing nothing")
        }
        else 
        {
            long t = state.timer
            long d = t * 60000 + 30000 // allow up to n millis delay for cron to execute
            if(now() - state.lastRun > d) // if this loop hasn't run for more than the timer's value, then it's probably that CRON is broken
            {
                log.warn "CRON SERVICE IS NOT WORKING! #$state.cronPositive Current time: ${new Date().format("h:mm:ss a", location.timeZone)} last sched run: ${state.lastRunStamp}" 
                state.cronPositive += 1

                if(now() - state.lastReboot > 15 * 60 * 1000)
                {
                    if(state.cronPositive > 3)
                    {
                        log.warn "*******************REBOOT **************"

                        reboot()
                    }
                }
                else 
                {
                    log.warn "LAST REBOOT WAS NOT SO LONG AGO, SKIPPING"
                    state.cronPositive = 0
                }

            }
            else 
            {
                if(state.cronPositive != 0)
                {
                    log.warn "FALSE CRON FAILLURE ALARM"
                    state.cronPositive = 0
                }
            }
        }
    }
}

def reboot(){
    log.warn "NOW REBOOTING THE HUB"
    if(workWithRemoteHub){sendGetCommand("/rebooting")}
    runCmd("${ip}", "8080", "/hub/reboot")// reboot
}
def rebootRemoteHub(){
    log.warn "----------------- REBOOTING ${clientName} ---------------------- "
    runCmd("${clientIP}", "8080", "/hub/reboot")// reboot

    // pause this app 
    unschedule()
    unsubscribe() // temporarily stop all instances to allow for the remote hub to start responding again
    state.pausedRemoteReboot = true // next ping received from other hub will switch back this boolean
    state.paused = true
    runIn(300, updated) // resume this app in a couple minutes to leave time for the other hub to reboot 
}
def runCmd(String ip,String port,String path) {

    def uri = "http://${ip}${":"}${port}${path}"
    log.debug "POST: $uri"

    def reqParams = [
        uri: uri
    ]

    try {
        httpPost(reqParams){response ->
        }
    } catch (Exception e) {
        log.error "${e}"
    }
}
def remoteServerHealth(){
    descriptiontext("Remote Server Health Check")
    remoteResponded = false

    logging "state.pausedRemoteReboot = $state.pausedRemoteReboot"
    def message = state.pausedRemoteReboot ? ("ping activity suspended because  ${clientName} is rebooting") : ("") //{sendGetCommand("/ping")}
    if(message){log.warn (message)}
    if(!state.pausedRemoteReboot){sendGetCommand("/ping")}

}
def parsePing(){ // receive ping from remote server
    if(state.paused && !state.pausedRemoteReboot)
    {
        log.info "ping activity paused"
    }
    else 
    {
        descriptiontext("Received ping from ${clientName}.")
        if(state.pausedRemoteReboot){
            // receiving ping from other hub so it is done rebooting, resuming this app
            updated()
        }
    }
    // send confirmation to the remote hub 
    sendConfirmation()
    jsonResponse([status: "received"])
}
def checkResult(){
    descriptiontext("checking if remote hub responded")
    int repeat = 3
    logging """
remoteResponded = $remoteResponded 
state.attempts = $state.attempts
repeat = $repeat
"""
    if(remoteResponded == false && state.attempts < repeat)// prevent false alarm 
    {
        if(state.attempts != 0) {log.warn "${clientName} failed to respond! attempt #$state.attempts"} //by delcaring faillure only as of 2 failed attempts
        state.attempts += 1
        state.pingInterval = 3000 // set shorter ping interval 
        runIn(30, remoteServerHealth) 
    }
    else if(remoteResponded == false && state.attempts >= repeat)
    {
        rebootRemoteHub()
    }
    else if(remoteResponded == true)
    {
        if(state.attempts != 0){log.warn "FALSE ALARM, resuming normal operations"}
        state.attempts = 0
        if(state.pingInterval != 60000)
        {
            state.pingInterval = 60000 // reset ping interval
        }
    }
    else 
    {
        log.error "Something went wrong, could not resolve reboot conditions..."
    }
}
def registerReboot(){
    log.warn "OTHER HUB is rebooting on its own, stopping all ping activities"
    state.pausedRemoteReboot = true
    state.paused = true
}
def sendConfirmation(){
    sendGetCommand("/confirmReception")
}
def sendGetCommand(command){

    def serverURI = state.clientURI + command

    logging("sending $serverURI")

    def requestParams =
        [
            uri:  serverURI,
            requestContentType: "application/json",
            headers:
            [
                Authorization: "Bearer ${state.clientToken}"
            ],
            timeout: 5
        ]

    try
    {
        asynchttpGet((enableDebug ? "asyncHTTPHandler" : null), requestParams)
    }
    catch (Exception e)
    {
        log.error "asynchttpGet() failed with error ${e.message}"
    }
}
def confirmationReceived(){

    remoteResponded = true
    if(state.attempts != 0){
        log.warn "FALSE ALARM ${clientName} is online"
    } else {
        descriptiontext"CONNECTION TO ${clientName} IS HEALTHY"
        logging "state.attempts RESET"
    }
    // declare false alarm only if 2 attempts were already made 

    state.attempts = 0
    runIn(1, appLabel)
}

def asyncHTTPHandler(response, data){
    if (response?.status != 200)
    {
        log.error "asynchttpGet() request failed with error ${response?.status}"
    }
}

def jsonResponse(respMap){
    render contentType: 'application/json', data: JsonOutput.toJson(respMap)
}
def configureRemote(){
    def connectString = serverKey

    def accessData
    try
    {
        accessData = parseJson(new String(connectString.decodeBase64()))
    }
    catch (errorException)
    {
        log.error "Error reading connection key: ${errorException}."
        responseText = "Error: Corrupt or invalid connection key"
        state.connected = false
        accessData = null
    }
    if (accessData)
    {
        // Set the coordinator hub details
        state.clientURI = accessData.uri
        state.clientToken = accessData.token
        state.clientType = accessData.type
        state.connectionType = accessData.connectionType

        log.info """
state.clientURI = $state.clientURI
state.clientToken = $state.clientToken
state.clientType = $state.clientType
state.connectionType = $state.connectionType
"""
    }
}
def appLabel(){
    state.lastLabelTime = now()
    def appLa = userLabel ? userLabel : "CSP WATCHDOG"  

    appLa = state.paused ? appLa + ("<font color = 'red'> paused </font>") : appLa

    if(workWithRemoteHub)
    {
        appLa = remoteResponded ? appLa + ("<font color = 'red'> online </font>"):appLa + ("<font color = 'red'> offline </font>")  
        appLa = state.pausedRemoteReboot ? appLa + ("<font color = 'red'> $clientName rebooting </font>") : appLa
    }
    logging("new app label: ${app.label}")
    app.updateLabel(appLa)
}
def logging(msg){
    def debug = settings.find{it.key == "enablelogging"}?.value
    if (debug) log.debug msg
    if(debug && state.EnableDebugTime == null) state.EnableDebugTime = now()

}
def descriptiontext(msg){
    def debug = settings.find{it.key == "enabledescriptiontext"}?.value
    if (debug) log.info msg

}
def disablelogging(){
    app.updateSetting("enablelogging",[value:"false",type:"bool"])
    log.warn "logging disabled!"
}
def getConnectString() {new groovy.json.JsonBuilder([uri: getFullLocalApiServerUrl(), type: state.remoteType, token: state.accessToken, connectionType: state.localConnectionType]).toString().bytes.encodeBase64()}
def menuHeader(titleText){"<div style=\"width:102%;background-color:#1C2BB7;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">${titleText}</div>"}
